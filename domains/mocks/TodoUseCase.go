// Code generated by mockery v2.35.4. DO NOT EDIT.

package mocks

import (
	models "boywatz/go-clean/models"

	mock "github.com/stretchr/testify/mock"
)

// TodoUseCase is an autogenerated mock type for the TodoUseCase type
type TodoUseCase struct {
	mock.Mock
}

// CreateTodo provides a mock function with given fields: t
func (_m *TodoUseCase) CreateTodo(t *models.Todo) error {
	ret := _m.Called(t)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Todo) error); ok {
		r0 = rf(t)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteTodo provides a mock function with given fields: t, id
func (_m *TodoUseCase) DeleteTodo(t *models.Todo, id string) error {
	ret := _m.Called(t, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Todo, string) error); ok {
		r0 = rf(t, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllTodo provides a mock function with given fields:
func (_m *TodoUseCase) GetAllTodo() ([]models.Todo, error) {
	ret := _m.Called()

	var r0 []models.Todo
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]models.Todo, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []models.Todo); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Todo)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOneTodo provides a mock function with given fields: t, id
func (_m *TodoUseCase) GetOneTodo(t *models.Todo, id string) error {
	ret := _m.Called(t, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Todo, string) error); ok {
		r0 = rf(t, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateTodo provides a mock function with given fields: t, id
func (_m *TodoUseCase) UpdateTodo(t *models.Todo, id string) error {
	ret := _m.Called(t, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Todo, string) error); ok {
		r0 = rf(t, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewTodoUseCase creates a new instance of TodoUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTodoUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *TodoUseCase {
	mock := &TodoUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
