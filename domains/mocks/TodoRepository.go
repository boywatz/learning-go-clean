// Code generated by mockery v2.35.4. DO NOT EDIT.

package mocks

import (
	models "boywatz/go-clean/models"

	mock "github.com/stretchr/testify/mock"
)

// TodoRepository is an autogenerated mock type for the TodoRepository type
type TodoRepository struct {
	mock.Mock
}

// CreateTodo provides a mock function with given fields: t
func (_m *TodoRepository) CreateTodo(t *models.Todo) error {
	ret := _m.Called(t)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Todo) error); ok {
		r0 = rf(t)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteTodo provides a mock function with given fields: t, id
func (_m *TodoRepository) DeleteTodo(t *models.Todo, id string) error {
	ret := _m.Called(t, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Todo, string) error); ok {
		r0 = rf(t, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllTodo provides a mock function with given fields: t
func (_m *TodoRepository) GetAllTodo(t *[]models.Todo) error {
	ret := _m.Called(t)

	var r0 error
	if rf, ok := ret.Get(0).(func(*[]models.Todo) error); ok {
		r0 = rf(t)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetOneTodo provides a mock function with given fields: t, id
func (_m *TodoRepository) GetOneTodo(t *models.Todo, id string) error {
	ret := _m.Called(t, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Todo, string) error); ok {
		r0 = rf(t, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateTodo provides a mock function with given fields: t, id
func (_m *TodoRepository) UpdateTodo(t *models.Todo, id string) error {
	ret := _m.Called(t, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Todo, string) error); ok {
		r0 = rf(t, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewTodoRepository creates a new instance of TodoRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTodoRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *TodoRepository {
	mock := &TodoRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
